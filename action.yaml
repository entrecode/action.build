name: Build-Action
description: 'build and push to ghcr'

inputs:
  PAT:
    description: 'PAT from repo'
    required: true
  NAMESPACE:
    description: 'Namespace'
    required: true
  NAME:
    description: 'Name'
    required: true
  ACTION_ENABLE_TESTING:
    description: 'if set to true, testcontainer will be created and tests will be run'
    required: false
    default: 'false'
  GITHUB_TOKEN:
    description: 'Github Token'
    required: true
  ACTIVATE_DEV_RUNNER:
    description: 'if set to true, devRunner container will be created'
    required: false
    default: 'false'
  LOCAL_TESTING_SECRET:
    description: 'local-testing.yaml secret'
    required: false
    default: 'false'
  DOCKERFILE_PATH:
    description: 'path to Dockerfile'
    required: false
    default: '.'

outputs:
  version:
    description: 'version of the container'
    value: ${{ steps.set-output.outputs.version }}
  env:
    description: 'environment of the container'
    value: ${{ steps.set-output.outputs.env }}

runs:
  using: 'composite'
  steps:
  - name: Checkout code
    uses: actions/checkout@v3

  - name: Check COPY . . in Dockerfile
    run: |
      if grep -q "COPY.*\. \." ${{ inputs.DOCKERFILE_PATH }}/Dockerfile; then
        echo "COPY . . is not allowed in Dockerfile"
        exit 1
      fi
    shell: bash

  - name: Login to Github Registry
    uses: docker/login-action@v2
    with:
      registry: ghcr.io
      username: ${{ github.repository_owner }}
      password: ${{ inputs.GITHUB_TOKEN }}

  - name: Set up Docker Buildx
    uses: docker/setup-buildx-action@v2

  # - name: get-npm-version
  #   id: package-version
  #   uses: martinbeentjes/npm-get-version-action@main

  - name: get-npm-version
    id: package-version
    run: |
      PACKAGE_VERSION=$(cat ${{ inputs.DOCKERFILE_PATH }}/package.json | jq '.version' | tr -d '"')
      echo "current-version=${PACKAGE_VERSION}" >> $GITHUB_OUTPUT
    shell: bash

  - name: Build Container name for develop
    if: github.ref == 'refs/heads/develop'
    run: |
      echo "IMAGE_TAG=dev" >> $GITHUB_ENV
      echo "ENV=stage" >> $GITHUB_ENV
    shell: bash

  - name: Build Container name for master
    if: github.ref != 'refs/heads/develop'
    run: |
      echo "IMAGE_TAG=${{ steps.package-version.outputs.current-version}}" >> $GITHUB_ENV
      echo "ENV=prod" >> $GITHUB_ENV
    shell: bash

  - name: Check file existence
    id: check_files
    uses: andstor/file-existence-action@v2
    with:
      files: '.env.production, next.config.*'

  - name: Remove production environment file on develop for next projects
    if: github.ref == 'refs/heads/develop' && steps.check_files.outputs.files_exists == 'true'
    run: |
      rm -f .env.production
    shell: bash

  - name: Write local-testing config file
    if: inputs.LOCAL_TESTING_SECRET != 'false'
    uses: 'DamianReeves/write-file-action@master'
    with:
      path: config/local-testing.yaml
      contents: |
        ${{ inputs.LOCAL_TESTING_SECRET }}

  - name: Set up docker buildx for tester
    if: inputs.ACTION_ENABLE_TESTING == 'true'
    id: tester
    uses: docker/build-push-action@v3
    with:
      context: ${{ inputs.DOCKERFILE_PATH }}
      file: ./Dockerfile
      push: true
      target: tester
      platforms: linux/amd64
      tags: ghcr.io/${{ github.repository }}:tester
      cache-from: type=local
      cache-to: type=local,mode=max
      build-args: |
        PAT=${{ inputs.PAT }}

  - name: Test
    if: inputs.ACTION_ENABLE_TESTING == 'true' && steps.tester.outcome == 'success'
    id: testrunner
    run: |
      docker run --rm ghcr.io/${{ github.repository }}:tester
    shell: bash

  - name: Remove local testing file
    if: inputs.LOCAL_TESTING_SECRET != 'false'
    run: |
      rm -f config/local-testing.yaml
    shell: bash

  - name: Build and push
    if: (inputs.ACTION_ENABLE_TESTING == 'false' || steps.testrunner.outcome == 'success') && inputs.ACTIVATE_DEV_RUNNER == 'true' && github.ref == 'refs/heads/develop'
    uses: docker/build-push-action@v3
    with:
      context: ${{ inputs.DOCKERFILE_PATH }}
      file: ./Dockerfile
      push: true
      target: devRunner
      platforms: linux/amd64
      tags: ghcr.io/${{ github.repository }}:${{ env.IMAGE_TAG }}
      cache-from: type=local
      cache-to: type=local,mode=max
      build-args: |
        PAT=${{ inputs.PAT }}

  - name: Build and push
    if: ((inputs.ACTION_ENABLE_TESTING == 'false' || steps.testrunner.outcome == 'success') && inputs.ACTIVATE_DEV_RUNNER == 'false') || ((inputs.ACTION_ENABLE_TESTING == 'false' || steps.testrunner.outcome == 'success') && inputs.ACTIVATE_DEV_RUNNER == 'true' && github.ref != 'refs/heads/develop')
    uses: docker/build-push-action@v3
    with:
      context: ${{ inputs.DOCKERFILE_PATH }}
      file: ./Dockerfile
      push: true
      target: runner
      platforms: linux/amd64
      tags: ghcr.io/${{ github.repository }}:${{ env.IMAGE_TAG }}
      cache-from: type=local
      cache-to: type=local,mode=max
      build-args: |
        PAT=${{ inputs.PAT }}

  - name: Set output
    id: set-output
    run: |
      echo "version=${{ env.IMAGE_TAG }}" >> $GITHUB_OUTPUT
      echo "env=${{ env.ENV }}" >> $GITHUB_OUTPUT
    shell: bash
